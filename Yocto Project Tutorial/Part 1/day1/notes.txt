Four elements of embedded Linux
--------------------------------

Toolchain: The compiler and other tools needed to create code for your target device. Everything else depends on the toolchain.

Bootloader: The program that initializes the board and loads the Linux kernel.

Kernel: This is the heart of the system, managing system resources and interfacing with hardware.

Root filesystem: Contains the libraries and programs that are run once the kernel has completed its initialization.

One more element can be collection of programs specific to your embedded application which make the device do whatever it is supposed to do, be it weigh groceries, display movies, control a robot, or fly a drone.



What is Yocto?
----------------

Yocto is the smallest SI metric system prefix

Like 'm' stands for milli ( 10^-3 ).

So is yocto ( y = 10^-24 )



What is Yocto Project
----------------------

Yocto project provides open source, high quality infrastructure and tools to help developers create their own custom Linux distributions for any hardware architecture.

History
------------

Founded in 2010,  in an effort to reduce work duplication, provide resources and information catering to both new and experienced users.

collaboration of
	many hardware manufacturers
	open source operating systems vendors and
	electronics companies

Yocto is also a project working group of the Linux Foundation
	


Advantages of Yocto Project
----------------------------

1. Widely Adopted Across the Industry
	Semiconductor, operating system, software, and service vendors exist whose products and services adopt and support the Yocto Project.
	Eg. Intel, Facebook, arm, Juniper Networks, LG, AMD, NXP, DELL

2. Architecture Agnostic
	supports Intel, ARM, MIPS, AMD, PPC and other architectures
	chip vendors create and supply BSPs that support their hardware
	if you have custom silicon, you can create a BSP that supports that architecture
	the Yocto Project fully supports a wide range of device emulation through the Quick EMUlator (QEMU)

3. Images and Code Transfer Easily
	Yocto Project output can easily move between architectures without moving to new development environments.

4. Flexibility
	Through customization and layering, a project group can leverage the base Linux distribution to create a distribution that works for their product needs.

5. Ideal for Constrained Embedded and IoT devices
	Unlike a full Linux distribution, you can use the Yocto Project to create exactly what you need for embedded devices
	You only add the feature support or packages that you absolutely need for the device

6. Uses a Layer Model
	The Yocto Project layer infrastructure groups related functionality into separate bundles.
	You can incrementally add these grouped functionalities to your project as needed
	Allows you to easily extend the system, make customizations, and keep functionality organized.
	


What is Yocto Project
----------------------

To understand the outcome provided by the Yocto Project, we can use the analogy of the computing machine

Input: Set of data that describes what we want, that is our specification 
		(Kernel Configuration, Hardware Name, Packages/Binaries to be installed)

Output: Linux Based Embedded Product 
		(Linux Kernel, Root File System, Bootloader, Device Tree, Toolchain)



Setting up Build Machine
--------------------------

Prerequisites
----------------

1. 50 Gbytes of free disk space

2. Runs a supported Linux distribution (i.e. recent releases of Fedora, openSUSE, CentOS, Debian, or Ubuntu). 

3. 
	Git 1.8.3.1 or greater

	tar 1.27 or greater

	Python 3.4.0 or greater.

Packages and package installation vary depending on your development system.

(*) Install the required packages for Yocto to Work from
        https://www.yoctoproject.org/docs/latest/ref-manual/ref-manual.html#ubuntu-packages

$ sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib \
    build-essential chrpath socat cpio python python3 python3-pip python3-pexpect \
    xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev \
    pylint3 xterm



Poky
-----------

Poky is a reference distribution of Yocto Project. The word "reference" is used to mean "example" in this context.

Yocto Project uses Poky to build images (kernel, system, and application software) for targeted hardware.

At the technical level it is a combined repository of the components
	• Bitbake
	• OpenEmbedded Core
	• meta-yocto-bsp
	• Documentation

Note: Poky does not contain binary files,it is a working example of how to build your own custom Linux distribution from source.

What is difference between poky and Yocto
-----------------------------------------

The exact difference between Yocto and Poky is Yocto refers to the organization ( like one would refer to 'canonical', the company behind Ubuntu ), and Poky refers to the actual bits downloaded ( analogous to 'Ubuntu' )



Metadata 
-------------

Non Yocto:  A set of data that describes and gives information about other data

Yocto World: 
	Metadata refers to the build instructions
	Commands and data used to indicate what versions of software are used
	Where they are obtained from
	Changes or additions to the software itself ( patches ) which are used to fix bugs or customize the software for use in a particular situation

Metadata is collection of
	• Configuration files (.conf)
	• Recipes (.bb and .bbappend)
	• Classes (.bbclass)
	• Includes (.inc)



